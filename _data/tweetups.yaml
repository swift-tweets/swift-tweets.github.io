2018-summer:
  title: "Swift Tweets 2018 Summer"
  shortTitle: "2018 Summer"
  lastId: 2018-spring
  hashtag: "swtws"
  date: "2018-07-14"
  dayOfWeek: "SAT"
  time: "21:00"
  timezone: "JST"
  entryLink: "https://swift-tweets.connpass.com/event/84462/"
  contact:
    twitterId: koher
    email: koher@koherent.org
  sponsors: []
  tweeters:
    - id: ukitaka_
      icon: https://pbs.twimg.com/profile_images/889301082844876802/ZoVAsW5A_400x400.jpg
      profile: |
        Coming soon
    - id: koher
      icon: https://pbs.twimg.com/profile_images/468631313/koher3.gif
      profile: |
        [Qoncept](http://qoncept.co.jp/) のエンジニア。小学 4 年生のときにゲームを作りたくてプログラミングを始める。そのときの経験を元に、 RPG を作りながらプログラミングを学ぶ [SWIFT QUEST](https://swift-quest.github.io/) を開発中。 [Qiita](http://qiita.com/) での Swift に関する[投稿](http://qiita.com/koher)が人気。
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "Coming soon"
      tweeterId: ukitaka_
      description: |
        Coming soon.
    - time: "21:40"
      title: "Coming soon"
      tweeterId: koher
      description: |
        Coming soon.
    - time: "22:10"
      name: "休憩"
    - time: "22:20"
      name: "Coming soon"
      description: |
        Coming soon.
    - time: "22:50"
      name: "クロージング"
2018-spring:
  title: "Swift Tweets 2018 Spring"
  shortTitle: "2018 Spring"
  lastId: 2018-winter
  hashtag: "swtws"
  date: "2018-04-14"
  dayOfWeek: "SAT"
  time: "21:00"
  timezone: "JST"
  entryLink: "https://swift-tweets.connpass.com/event/77111/"
  contact:
    twitterId: koher
    email: koher@koherent.org
  sponsors: []
  tweeters:
    - id: k_katsumi
      icon: https://pbs.twimg.com/profile_images/938253364877434880/AFvicwis_400x400.jpg
      profile: |
        Software enginner @FOLIO (prev @Realm). 自転車とキャンプが趣味です。
    - id: koher
      icon: https://pbs.twimg.com/profile_images/468631313/koher3.gif
      profile: |
        [Qoncept](http://qoncept.co.jp/) のエンジニア。小学 4 年生のときにゲームを作りたくてプログラミングを始める。そのときの経験を元に、 RPG を作りながらプログラミングを学ぶ [SWIFT QUEST](https://swift-quest.github.io/) を開発中。 [Qiita](http://qiita.com/) での Swift に関する[投稿](http://qiita.com/koher)が人気。
    - id: S_Shimotori
      icon: https://pbs.twimg.com/profile_images/813245377663012865/Jamck_qy_400x400.jpg
    - id: amarillons
      icon: https://pbs.twimg.com/profile_images/913192634411229184/69eFuPDI_400x400.jpg
    - id: fumiyasac
      icon: https://pbs.twimg.com/profile_images/612594250258120704/uyKDpKOn_400x400.jpg
      profile: |
        アプリのUI実装が好きな元デザイナーからジョブチェンジをしたエンジニア。QiitaやGithubなどでもUI実装に関するサンプルや解説記事を投稿したり、Swift愛好会をはじめとする勉強会等でもたまに登壇しています。アイデアを練る時はもっぱら手書き派です。
    - id: hironytic
      icon: https://pbs.twimg.com/profile_images/902030434900467714/4_UrnG-l_400x400.jpg
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "Swift 4.1のConditional Conformanceとジェネリクスの未来"
      tweeterId: koher
      description: |
        先日 Swift 4.1 がリリースされました。 Swift 4.1 の最大の変更はなんといっても [Conditional Conformance](https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md) です。本発表では、

        - Conditional Conformance とは何か
        - Conditional Conformance は何の役に立つのか
        - Conditional Conformance が標準ライブラリに与える影響の例

        について説明します。

        また、 Conditional Conformance は [Generics Manifesto](https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md) に示された変更の一つです。これまでにジェネリクスに加えられた変更と Generics Manifesto の内容を元にして、僕の考える Swift のジェネリクスの方向性と未来について話します。
    - time: "21:55"
      name: "休憩"
    - time: "22:00"
      title: "Swift 4.1で導入されたcompactMapとその背景について"
      tweeterId: amarillons
    - time: "22:10"
      title: "QuickとXCTestと"
      tweeterId: S_Shimotori
    - time: "22:20"
      name: "休憩"
    - time: "22:25"
      title: "UIを作る際にライブラリにする？それともDIYする？の切り分けと実装のアイデア帳"
      tweeterId: fumiyasac
    - time: "22:35"
      title: "！なことっ 知っとこな！"
      tweeterId: Hiron
    - time: "22:45"
      name: "休憩"
    - time: "22:50"
      title: "Swift Playgroundを作ろう"
      tweeterId: k_katsumi
      description: |
        SwiftでJSFiddleのような、オンラインでいろいろなコードを試せるPlaygroundを作りましょう。
        重たいXcodeを起動しなくてもブラウザでサッと書いてすぐにコードを実行して結果を確認できます。
        問題のあるコードを複数人で実行結果を確認しながら議論できます。

        他にも、自分の作ったフレームワーク（それがLinux環境でも動作するのなら）のデモンストレーションとしても最適です。
        
        実際に活用している例として、私が公開しているSwift Power AssertやSwiftfmtの動作をインストールしなくてもWebで簡単に試せるライブデモとして公開しています。
        
        [https://swift-power-assert.kishikawakatsumi.com/](https://swift-power-assert.kishikawakatsumi.com/)
        [https://swiftfmt.kishikawakatsumi.com/](https://swiftfmt.kishikawakatsumi.com/)
        
        実行結果を画面ではなくJSONで返すWeb APIにすれば、チャットに投稿したコードを実行して結果を返すBotを作ることもできます。オンラインで議論したりするときに非常に便利です。このBotはiOS開発者が集うDiscordサーバーで実際に運用されており、当初の思惑を大きく超えて活発な議論に大いに役立っています。
        
        repl.itやWandboxなど、Swiftをサポートする同様のサービスもありますが、Swiftは変化の早いプログラミング言語です。残念ながらサポートするバージョンが古かったり、うまく動かないことの方がまだ多いようです。
        しかし、自分でセットアップするぶんにはまだリリースされてない最新のスナップショットを使用することもできます！
    - time: "23:20"
      name: "クロージング"
2018-winter:
  title: "Swift Tweets 2018 Winter"
  shortTitle: "2018 Winter"
  lastId: 2017-fall
  hashtag: "swtws"
  date: "2018-01-20"
  dayOfWeek: "SAT"
  time: "21:00"
  timezone: "JST"
  entryLink: "https://swift-tweets.connpass.com/event/70160/"
  contact:
    twitterId: koher
    email: koher@koherent.org
  sponsors: []
  tweeters:
    - id: ikesyo
      icon: https://pbs.twimg.com/profile_images/650531959152574464/RuR-d-4B_400x400.jpg
      profile: |
        Swift (corelibs-foundation) contributor. [Himotoki](https://github.com/ikesyo/Himotoki)/[Carthage](https://github.com/Carthage/Carthage)/[ReactiveSwift](https://github.com/ReactiveCocoa/ReactiveSwift)のコミッター。 京都の[はてな](http://www.hatena.ne.jp/)でiOS/Androidアプリエンジニアやってます。
    - id: koher
      icon: https://pbs.twimg.com/profile_images/468631313/koher3.gif
      profile: |
        [Qoncept](http://qoncept.co.jp/) のエンジニア。小学 4 年生のときにゲームを作りたくてプログラミングを始める。そのときの経験を元に、 RPG を作りながらプログラミングを学ぶ [SWIFT QUEST](https://swift-quest.github.io/) を開発中。 [Qiita](http://qiita.com/) での Swift に関する[投稿](http://qiita.com/koher)が人気。
    - id: takasek
      icon: https://pbs.twimg.com/profile_images/708591418655125505/toP3_XwC_400x400.jpg
    - id: hiragram
      icon: https://pbs.twimg.com/profile_images/790358777669103616/ekasI88Y_400x400.jpg
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "どうやってSwiftのOSSをメンテナンスしていくか"
      tweeterId: ikesyo
      description: |
        OSSを公開すること自体は簡単ですが、それをきちんとメンテナンスしていくことは意外と大変です。ましてやSwiftのような若い言語では、毎年のバージョンアップにも追従していく必要があります。

        Swift製のOSSにたくさん首を突っ込んでいる立場から、どのようにプロジェクトに貢献していくのか、メンテナンスをしていくのか、ということについて実体験から得た知見を共有したいと思います。
    - time: "21:40"
      name: "休憩"
    - time: "21:45"
      title: "Swift Foundationにコントリビュートする"
      tweeterId: takasek
    - time: "21:55"
      title: "iOSじゃないところでSwiftを使う"
      tweeterId: hiragram
    - time: "22:05"
      name: "休憩"
    - time: "22:10"
      title: "世界をプログラミングで満たしたい"
      tweeterId: koher
    - time: "22:50"
      name: "クロージング"
2017-fall:
  title: "Swift Tweets 2017 Fall"
  shortTitle: "2017 Fall"
  lastId: 2017-summer
  hashtag: "swtws"
  date: "2017-10-21"
  dayOfWeek: "SAT"
  time: "21:00"
  timezone: "JST"
  entryLink: "https://swift-tweets.connpass.com/event/62883/"
  contact:
    twitterId: koher
    email: koher@koherent.org
  sponsors: []
  tweeters:
    - id: koher
      icon: https://pbs.twimg.com/profile_images/468631313/koher3.gif
      profile: |
        [Qoncept](http://qoncept.co.jp/) のエンジニア。小学 4 年生のときにゲームを作りたくてプログラミングを始める。そのときの経験を元に、 RPG を作りながらプログラミングを学ぶ [SWIFT QUEST](https://swift-quest.github.io/) を開発中。 [Qiita](http://qiita.com/) での Swift に関する[投稿](http://qiita.com/koher)が人気。
    - id: omochimetaru
      icon: https://pbs.twimg.com/profile_images/448177563051913216/Tcox9dud_400x400.png
      profile: |
        いろいろなプログラミング言語について横断的に議論するのが好き。その中でも Swift は 1 世代先を行っていると思っていて、一番やっていっている。最近は [Discord](https://medium.com/swift-column/discord-ios-20d586e373c0) での話し相手を増やすべく、勧誘をしている。
    - id: taketo1024
      icon: https://pbs.twimg.com/profile_images/472096985596436480/N2gO6T3b_400x400.png
      profile: |
        元 iOS エンジニア、現数学専攻の大学院生。数学科卒業後、 9 年間ベンチャー企業から大手 IT 企業まで渡り歩き、再び大学院に戻って数学を志す。[「プログラマのための数学勉強会」](https://maths4pg.connpass.com/)主催。
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "Ownershipの紹介"
      url: "https://qiita.com/omochimetaru/items/c5f0eabde516e4713367"
      tweeterId: omochimetaru
      description: |
        Swift はネイティブコンパイルや値型など、高速な動作を意識して設計されています。しかし、 CPU の性能を活かしきるコードを書くには機能が足りていません。

        コアチームは、その不足している機能郡のうち、あるカテゴリに属するものをまとめて Ownership という名前をつけ、今後の対応方針を文書化しました。

        その文書は [Ownership Manifesto](https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md) といいます。これには今後の対応予定が示されていますが、すでに Swift に実装されている部分もあります。

        この発表では、この文書にもとづいて、Swiftの Ownership 機能を紹介します。
    - time: "22:40"
      title: "Swift で √2 を作ろう"
      url: "https://togetter.com/li/1163526"
      tweeterId: taketo1024
      description: |
        数学における代数構造を `protocol` として、対応する集合を `struct` として実装することで、数学の理論に忠実なコードを Protocol Oriented に作ることができます。

        この発表では数学の専門知識を仮定せずに、群・環・体の定義から「代数拡大で√2を作る話」まで、コードを元に解説していきます。数学に自信ない方でも Swift で数学を作る楽しさを感じて頂けたら幸いです。

        ※ iOSDC で発表した[「Swift で数学のススメ」](https://www.slideshare.net/taketo1024/swift-79828803)のコードレベルの解説となります。
    - time: "22:10"
      name: "休憩"
    - time: "22:20"
      title: "Proposalには載っていないSwift 5のasync/awaitが素晴らしいと思う理論的背景"
      url: "https://qiita.com/koher/items/29357b5e00aec1962601"
      tweeterId: koher
      description: |
        Swift プログラマは長年に渡り非同期処理の辛さを強いられてきました。しかし去る 8 月、ついに Chris Lattner から `async/await` が[提案されました](https://gist.github.com/lattner/429b9070918248274f25b714dcfc7619)。この `async/await` は C# や JavaScript のものをそのまま輸入したわけではなく、 Swift にフィットするように変更が加えられています。

        実は、僕は[ほぼ同じ内容の提案をしようと準備をしていました](https://gist.github.com/koher/3e04b4f1b8adbbf0379d38c0ad83a3ea)。しかし、内容はほぼ同じものの、 Chris Lattner の Proposal には僕がなぜこの形の `async/await` が Swift にフィットすると考えたのかと同じような説明は書かれていませんでした。本発表では、僕がこのような `async/await` が適していると考えた理論的背景を説明することで、提案された `async/await` の素晴らしさについて補足することを目指します。
    - time: "23:00"
      name: "クロージング"
2017-summer:
  title: "Swift Tweets 2017 Summer"
  shortTitle: "2017 Summer"
  lastId: 2017-spring
  hashtag: "swtws"
  date: "2017-07-22"
  dayOfWeek: "SAT"
  time: "21:00"
  timezone: "JST"
  entryLink: "https://swift-tweets.connpass.com/event/55313/"
  contact:
    twitterId: koher
    email: koher@koherent.org
  sponsors: []
  tweeters:
    - id: 1024jp
      icon: https://pbs.twimg.com/profile_images/723566478247649281/q-Vljb8v.jpg
      profile: |
        余暇時間にせっせと開発をするホビー開発者。 macOS アプリケーション専門。 2014 年から [CotEditor](https://coteditor.com) の開発を引き継いでいる。 OSS プロジェクト運営からコーディング、アイコンのデザインまで、 macOS のアプリケーション開発に関わることなら全部やるマンである。
    - id: koher
      icon: https://pbs.twimg.com/profile_images/468631313/koher3.gif
      profile: |
        [Qoncept](http://qoncept.co.jp/) のエンジニア。小学 4 年生のときにゲームを作りたくてプログラミングを始める。そのときの経験を元に、 RPG を作りながらプログラミングを学ぶ [SWIFT QUEST](https://swift-quest.github.io/) を開発中。 [Qiita](http://qiita.com/) での Swift に関する[投稿](http://qiita.com/koher)が人気。
    - id: rintaro
      icon: https://pbs.twimg.com/profile_images/856741178774925312/KZTozYoo.jpg
      profile: |
        Swift で開発したい Web エンジニア。なかなか仕事で Swift 書けないけどコンパイラの仕組みを勉強したいと思い、ソース見てたら[いつの間にか PR 投げまくるようになって今に至る](https://github.com/apple/swift/commits?author=rintaro)。オープンソース化前は [Stack Overflow で遊んでた](http://stackoverflow.com/users/3804019/rintaro)。
    - id: takasek
      icon: https://pbs.twimg.com/profile_images/708591418655125505/toP3_XwC.jpg
      profile: |
        フリーランスエンジニア、ほぼ [FiNC](https://finc.com/) 。 Swift のおかげで型と設計が好きになり、方々の勉強会に参加しては発表駆動学習を試みている👉 [Qiita](http://qiita.com/takasek), [SpeakerDeck](https://speakerdeck.com/takasek) 。イチオシの自作 OSS は、 target/action をクロージャに置き換える [ActionClosurable](https://github.com/takasek/ActionClosurable) 。
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "CotEditor を Swift に移行する"
      url: "https://qiita.com/1024jp/items/ef79bfb6ba9823adddcc"
      tweeterId: 1024jp
      description: |
        2004 年から脈々と受け継がれる総 Cocoa 製の macOS 用テキストエディタ [CotEditor](https://coteditor.com) は、昨年 2016 年に Objective-C から Swift に 100% 移行しました。

        Swift は魅力的な言語ですが、すでに Objective-C で 10 年超動いてるアプリケーションを誰に頼まれたわけでもないのにわざわざ Swift で書き直す意味は果たしてあるのでしょうか？

        そこそこの規模の GUI アプリケーションを OSS 活動として実際にひとりで Swift に書き換えること、またコードが Swift になったことによる開発上の変化についてを、CotEditor の現開発者としてお話しします。
    - time: "21:35"
      title: "実践Swiftコンパイラ"
      url: "https://qiita.com/rintaro/items/e762d2a52c26a0be9fdc"
      tweeterId: rintaro
      description: |
        この発表では、実際に Swift コンパイラのバグを修正し、プルリクエストを投げるまでの手続きを実践してみます。

        Swift コンパイラがオープンソース化されて結構な時間が経ちますが、まだまだ実際にコントリビュートしている人は少ない様です。コンパイラは私たちがいつも使っている道具の核です。その道具をより良くしていく努力に理由など必要無いはず。

        コンパイラは C++ で実装されていますが、バグを修正する程度の変更に C++ の知識はほとんど必要ありません。この発表によって少しでも「案外簡単な」コンパイラへのコントリビュートに興味をもっていただければと思います。
    - time: "22:00"
      name: "休憩"
    - time: "22:10"
      title: "Swiftに息づくstructural types"
      url: "https://qiita.com/takasek/items/c15ef7ce5a00e65a4ad2"
      tweeterId: takasek
      description: |
        プログラミング言語の型システムは、その型の同定やサブタイピングの方法に注目したとき、 nominal type system / structural type system の二種類に区分することができます。 nominal type system においては型名の宣言が明示的に行われた場合にのみ同じ型あるいはサブタイプと見做されますが、 structural type system では型名はただのエイリアスです。

        Swift は多くの型を nominal type として扱っています。以前発表した ["What is a nominal type?"](https://speakerdeck.com/takasek/what-is-a-nominal-type) というスライドでは、 nominal type が意図しない型の同一視を防ぐために有用であることを示しました。

        では反対に、 structural type として扱われている関数型やタプル型は、なぜ nominal ではないのでしょうか。それらの型の活用例や、そこから見えてくる nominal type system の弱点や限界について、 ["型システム入門 −プログラミング言語と型の理論−"](https://www.amazon.co.jp/dp/4274069117) を参照しながら探ります。
    - time: "22:35"
      title: "純粋値型Swift"
      url: "https://qiita.com/koher/items/0745415a8b9842563ea7"
      tweeterId: koher
      description: |
        Swift は値型を中心とした言語です。この発表では、仮に参照型を使わずに値型だけを使った場合、 Swift でどれだけのことができるかを探ります。

        Swift が登場した当初、僕は Swift が値型を中心としていることに戸惑いました。参照型でないとできないことは色々あるし、世の中は値型でも参照型に見せかける方向に動いていると思っていたからです。しかし、 Swift を使うにつれて、値型だけでできることは当初考えていたよりもずっと幅広いことがわかってきました。また、値型の特性を活かすことで、参照型では面倒なケースでコードを簡潔に保てることもわかってきました。

        Swift が最も利用されている iOS アプリ開発では、 UIKit 等の Objective-C 由来の Framework に引っ張られて参照型中心のプログラミングになってしまうことが多いと思います。そのため、せっかく値型中心の言語なのに Swift で値型中心のプログラミングをするための知見は十分に広まっていないように思います。この発表を通して、多くの人に値型中心でプログラミングをすることに対して興味を持っていただければと思います。
    - time: "23:00"
      name: "クロージング"
2017-spring:
  title: "Swift Tweets 2017 Spring"
  shortTitle: "2017 Spring"
  lastId: 2017-winter
  hashtag: "swtws"
  date: "2017-04-15"
  dayOfWeek: "SAT"
  time: "21:00"
  timezone: "JST"
  entryLink: "https://swift-tweets.connpass.com/event/48887/"
  contact:
    twitterId: koher
    email: koher@koherent.org
  sponsors: []
  tweeters:
    - id: d_date
      icon: https://pbs.twimg.com/profile_images/839327159340584960/1t9Wsw-N.jpg
      profile: |
        フリーランスでエンジニアをしています。 MRC の時代から iOS アプリの開発を行っていて、最近は [Realm News の日本語への翻訳](https://realm.io/jp/news/)や、[英語の勉強会](https://clem.connpass.com)の運営もしています。よく使うアーキテクチャは MVC です。
    - id: koher
      icon: https://pbs.twimg.com/profile_images/468631313/koher3.gif
      profile: |
        [Qoncept](http://qoncept.co.jp/) のエンジニア。小学 4 年生のときにゲームを作りたくてプログラミングを始める。そのときの経験を元に、 RPG を作りながらプログラミングを学ぶ [SWIFT QUEST](https://swift-quest.github.io/) を開発中。 [Qiita](http://qiita.com/) での Swift に関する[投稿](http://qiita.com/koher)が人気。
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "Vapor as a web framework"
      tweeterId: rb_de0
    - time: "21:15"
      title: "Swift 4では何が変わりそうなのか"
      url: "https://qiita.com/d_date/items/b3562f542afc306791ce"
      tweeterId: d_date
      description: |
        Swift のバージョンアップは既存の API を使いやすく、美しくしてくれますが、痛みを伴うことが多いものとなっています。特に 2016 年は Swift 2.2 から 3.0 へのバージョンアップにより、その痛みを身を持って体験されたかと思います。また、 Xcode 8.3 から Swift 2.3 のサポートも終了し、 Swift 3 への移行を強いられることとなりました。

        Swift 3 への移行も一段落したところですが、今年は Swift 4 へのバージョンアップが予定されています。 Swift Evolution を始め、どのような機能が含まれるのか、日々議論がなされていますが、具体的にどのような変更が入るのか、ここで一度みなさんで見てみましょう。日頃メーリスを読んで、バッチリな方も、 Swift 4 のことはまだ全然キャッチアップできていない方も、一緒に Swift のこれからの話をしましょう。
    - time: "21:45"
      name: ディスカッション
    - time: "22:00"
      name: 休憩
    - time: "22:05"
      title: "Swift Standard Library相関図"
      tweeterId: S_Shimotori_pub
    - time: "22:10"
      title: SwiftのOptionalのベストプラクティス
      url: "https://qiita.com/koher/items/8b6156c8263b9b23c43c"
      tweeterId: koher
      description: |
        2年程前、 Qiita に[『SwiftのOptional型を極める』](http://qiita.com/koher/items/c6f446bad54442a28bf4)という投稿をしました。内容は、 `Optional` とは何かという説明と、 `Optional` のベストプラクティスを合わせたようなものでした。

        しかし、 Swift 1 だった当時と比べると状況が大きく変わり、特にベストプラクティスの部分が適切ではなくなってきました。また、 Swift の経験値も蓄積され、新たな知見も多く得られました。

        そこで、 Swift 3.1 時点での `Optional` 周りを整理し、いつ・どのように `Optional` を使うべきか、 `Optional` に関するベストプラクティスを説明します。
    - time: "22:45"
      name: 休憩
    - time: "22:50"
      title: "モックを「差し込む方法」を考える"
      tweeterId: hironytic
    - time: "22:55"
      title: "Swiftで、ビデオ通話実装してみた"
      tweeterId: nanamoto7483
    - time: "23:00"
      name: "クロージング"
2017-winter:
  title: "Swift Tweets 2017 Winter"
  shortTitle: "2017 Winter"
  hashtag: "swtws"
  date: "2017-01-14"
  dayOfWeek: "SAT"
  time: "22:00"
  timezone: "JST"
  entryLink: "https://swift-tweets.connpass.com/event/45878/"
  contact:
    twitterId: koher
    email: koher@koherent.org
  sponsors:
    - id: "qiita"
      name: "Qiita"
      link: "http://qiita.com/"
  tweeters:
    - id: _mono
      icon: https://pbs.twimg.com/profile_images/476454722593771520/goSBw3js.png
      profile: |
        [JOIN US](http://joinus30.com) のエンジニア。 [Qiita (@mono0926)](http://qiita.com/mono0926) ・ [Medium の Publication](https://medium.com/swift-column) ・ [Build Insiderオピニオン](http://www.buildinsider.net/column/ono-masayuki) などで、多数の Swift ・ iOS 系記事を書いている。開発だけでなく最新ガジェット使うのも好き。
    - id: koher
      icon: https://pbs.twimg.com/profile_images/468631313/koher3.gif
      profile: |
        [Qoncept](http://qoncept.co.jp/) のエンジニア。小学 4 年生のときにゲームを作りたくてプログラミングを始める。そのときの経験を元に、 RPG を作りながらプログラミングを学ぶ [SWIFT QUEST](https://swift-quest.github.io/) を開発中。 [Qiita](http://qiita.com/) での Swift に関する[投稿](http://qiita.com/koher)が人気。
    - id: susieyy
      icon: https://pbs.twimg.com/profile_images/526384966729355266/pVDh04p6.png
      profile: |
        [Wantedly](http://wantedly.com) の新規アプリ開発エンジニア。 [Swift について発表](http://connpass.com/user/youhei_sugigami/presentation/)したり [Qiita (@susieyy)](http://qiita.com/susieyy) で Swift について書いたりしています。
    - id: tarunon
      icon: https://pbs.twimg.com/profile_images/677005712497713152/X_2Mf8gO.jpg
      profile: |
        「たるのんだよ。すいふとをかくけど、おぶじぇしいもかくよ。」博多で Swift 書いてます。 `associatedtype` でガチガチに固めたコードを渡すと喜びます。 [GitHub はこちら](http://github.com/tarunon/)。
  schedule:
    - time: "22:00"
      name: "オープニング"
    - time: "22:05"
      title: Swift時代に悩ましいUIViewControllerをどう扱うか
      url: "https://qiita.com/susieyy/items/bf39c5769d8d4a56bb9b"
      tweeterId: susieyy
      description: |
        iOS アプリ開発において `UIViewController` は画面のライフルサイクルや遷移を担う中心的な存在ですが、悩ましい課題もいくつか孕んでいます。そんな `UIViewController` を Swift を活用して課題に立ち向かってみます。

        今回ご紹介する方法が一般的により優れているということではなくアプリの要件、開発規模、チームメンバー構成、設計方針により適応できるかどうかはケース・バイ・ケースになると思うので開発の選択肢の１つとして捉えていただけると幸いです。
    - time: "22:35"
      title: Swiftのエラー4分類が素晴らしすぎるのでみんなに知ってほしい
      url: "https://qiita.com/koher/items/a7a12e7e18d2bb7d8c77"
      tweeterId: koher
      description: |
        Swift Core Team がエラー処理について言語設計時に考察した ["Error Handling Rationale and Proposal"](https://github.com/apple/swift/blob/master/docs/ErrorHandlingRationale.rst) というドキュメントがあります。その中で、プログラミングにおけるエラーが次の四つに分類されています。

        - Simple domain error
        - Recoverable error
        - Universal error
        - Logic failure

        考えれば考えるほど、この分類が本質的で素晴らしい、 Swift に限らないものだとわかってきました。 Swift を書く上でエラーをどう設計すれば良いのか、 Java の検査例外はなぜ失敗したのか、多くの言語のエラー処理機構には何が足りないのか、この分類を通して考えたことを紹介します。
    - time: "23:05"
      title: Swiftの型の限界を超える
      url: "https://qiita.com/tarunon/items/e3fd01b02a199747eb5e"
      tweeterId: tarunon
      description: Swift で `associatedtype` や Generics を駆使してプログラムを書いているとしばしば壁に打ち当たることがあると思います。気持ちよくコードを書いていたが、コンパイルが通らなくなってしまう。思い描いていた美しい世界が実現できずに悔しい思いをしたことはないでしょうか。このセッションでは、僕が Swift 3.0 以降で見つけた幾つかの「壁」と、それを超えるための Workaround を、コンパイルが通らなくなる原因とともに解説していきたいと思います。
    - time: "23:35"
      title: "SwiftのString(文字列) APIとの付き合い方"
      url: "https://qiita.com/mono0926/items/139014be6c15e32b9696"
      tweeterId: _mono
      description: |
        Swift の String (文字列) API は、文字列の概念を厳密に扱うようになっており良くできています。その反面、難しい・取っつきにくい・普段取り扱う際に不便、など気になる点もあります。そんな Swift の String API とどのように付き合っていけば良いだろうか、という考察をしていきます。

        前提として以下の記事に記載されている内容を理解済みとして、 Unicode・Swift の String API の仕様自体の説明は発表では最小限とする予定です。

        - [Unicodeとは？ その歴史と進化、開発者向け基礎知識 - Build Insider](http://www.buildinsider.net/language/csharpunicode/01)
        - [なぜSwiftの文字列APIは難しいのか \| プログラミング \| POSTD](http://postd.cc/why-is-swifts-string-api-so-hard/)
        - [「文字数」ってなぁに？〜String, NSString, Unicodeの基本〜 - Qiita](http://qiita.com/takasek/items/19438ecf7e60c8d53bbc)
    - time: "24:05"
      title: 型推論のビルドが遅いらしいから調べてみる
      tweeterId: jpmartha_jp
    - time: "24:10"
      title: 恐怖！忍び寄るライブラリへのロックイン
      tweeterId: takasek
    - time: "24:15"
      title: 関数型プログラミングの実際のところ
      tweeterId: S_Shimotori_pub
    - time: "24:20"
      title: "Never GiveUp"
      tweeterId: es_kumagai
    - time: "24:25"
      title: iOSにおけるクリーンアーキテクチャよもやま話
      tweeterId: ktanaka117
    - time: "24:30"
      title: "Clean Architecture 開発ツールの話"
      tweeterId: yhirose741
    - time: "24:35"
      name: "フリートーク"
      description: |
        発表内容やその他 Swift について、自由にツイートする時間です。普段は、いきなりメンションツイートで何かを質問したり意見を聞いたりすることは難しいと思いますが、この時間はオフラインの懇親会のように自由に交流して下さい。

        Swift Tweets の参加者一覧は[こちら](https://swift-tweets.connpass.com/event/45878/)です。
    - time: "24:55"
      name: "クロージング"
