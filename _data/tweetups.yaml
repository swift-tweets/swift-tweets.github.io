- id: 2018-fall
  title: "Swift Tweets 2018 Fall"
  short_title: "2018 Fall"
  hashtag: "swtws"
  date: "2018-10-20"
  day_of_week: "SAT"
  time: "21:00"
  timezone: "JST"
  entry_link: "https://swift-tweets.connpass.com/event//"
  contact:
    twitter_id: koher
    email: koher@koherent.org
  sponsors: []
  tweeter_ids:
    - koher
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "Coming soon"
    - time: "22:35"
      title: "Coming soon"
      tweeter_id: koher
      description: Coming soon
    - time: "23:05"
      name: "クロージング"
- id: 2018-summer
  title: "Swift Tweets 2018 Summer"
  short_title: "2018 Summer"
  hashtag: "swtws"
  date: "2018-07-14"
  day_of_week: "SAT"
  time: "21:00"
  timezone: "JST"
  entry_link: "https://swift-tweets.connpass.com/event/84462/"
  contact:
    twitter_id: koher
    email: koher@koherent.org
  sponsors: []
  tweeter_ids:
    - ukitaka_
    - koher
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "Swiftの型システムにおけるサブタイピングの定義と実装"
      tweeter_id: ukitaka_
      description: |
        Swiftの型システムには他の言語にはみられないような特徴がいくつかあり、それによって言語としての使いやすさが支えられています。 今回は特にサブタイピングに焦点をあってて、どんな規則があり、それがどのように実装されているかを解説してみたいと思います。
    - time: "21:40"
      name: "休憩"
    - time: "21:45"
      title: "Coming soon"
      tweeter_id: shmdevelop
    - time: "21:55"
      title: "Server Side Swift -Kitura & Vapor-"
      tweeter_id: el_hrhm
    - time: "22:05"
      name: "休憩"
    - time: "22:10"
      title: "Coming soon"
      tweeter_id: orga_chem
    - time: "22:20"
      title: "Swift4.2のRandom APIについて"
      tweeter_id: ar_t_ae
    - time: "22:30"
      name: "休憩"
    - time: "22:35"
      title: "なぜSwiftのプロトコルはジェネリクスをサポートしないのか"
      tweeter_id: koher
      description: |
        Swift のプロトコルはよく Java 等のインタフェースのようなものだと言われます。しかし、 Java 等のインタフェースとは異なり、 Swift のプロトコルはジェネリクスをサポートしていません。ジェネリクスの型パラメータの代わりにプロトコルは `associatedtype` を持てますが、 `associatedtype` を持ったプロトコル型の変数を作ることはできません。ジェネリックなインタフェースを作り、そのインタフェース型の変数を扱うことは、 Java 等ではあまりに当たり前に行われていることです。どうして Swift のプロトコルはそれができない仕様になっているのでしょうか。本トークでは、

        - なせ Swift のプロトコルはジェネリクスをサポートしないのか
        - どうしてそれが Swift の言語仕様に適しているのか
        - ジェネリックなプロトコルなしにどのようにコードを書けばよいのか

        について説明します。
    - time: "23:05"
      name: "クロージング"
- id: 2018-spring
  title: "Swift Tweets 2018 Spring"
  short_title: "2018 Spring"
  hashtag: "swtws"
  date: "2018-04-14"
  day_of_week: "SAT"
  time: "21:00"
  timezone: "JST"
  entry_link: "https://swift-tweets.connpass.com/event/77111/"
  contact:
    twitter_id: koher
    email: koher@koherent.org
  sponsors: []
  tweeter_ids:
    - k_katsumi
    - koher
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "Swift 4.1のConditional Conformanceとジェネリクスの未来"
      url: "https://qiita.com/koher/items/4ae98d71b8eb06ab1b79"
      tweets_url: "https://twitter.com/koher/status/985127876507860993"
      tweeter_id: koher
      description: |
        先日 Swift 4.1 がリリースされました。 Swift 4.1 の最大の変更はなんといっても [Conditional Conformance](https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md) です。本発表では、

        - Conditional Conformance とは何か
        - Conditional Conformance は何の役に立つのか
        - Conditional Conformance が標準ライブラリに与える影響の例

        について説明します。

        また、 Conditional Conformance は [Generics Manifesto](https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md) に示された変更の一つです。これまでにジェネリクスに加えられた変更と Generics Manifesto の内容を元にして、僕の考える Swift のジェネリクスの方向性と未来について話します。
    - time: "21:55"
      name: "休憩"
    - time: "22:00"
      title: "Swift 4.1で導入されたcompactMapとその背景について"
      url: "https://qiita.com/amarillons/items/e897ca495470963249fe"
      tweets_url: "https://twitter.com/amarillons/status/985147260689420288"
      tweeter_id: amarillons
    - time: "22:10"
      title: "QuickとXCTestと"
      url: "https://qiita.com/S_Shimotori/items/197c89913fe60e234381"
      tweets_url: "https://twitter.com/S_Shimotori_pub/status/985139027903840256"
      tweeter_id: S_Shimotori_pub
    - time: "22:20"
      name: "休憩"
    - time: "22:25"
      title: "UIを作る際にライブラリにする？それともDIYする？の切り分けと実装のアイデア帳"
      url: "https://qiita.com/fumiyasac@github/items/144aec1e1726500d9d5a"
      tweets_url: "https://twitter.com/fumiyasac/status/985143513502253056"
      tweeter_id: fumiyasac
    - time: "22:35"
      title: "！なことっ 知っとこな！"
      url: "https://qiita.com/hironytic/items/0ca33b2c0415cdd38aff"
      tweets_url: "https://twitter.com/hironytic/status/985163326530310146"
      tweeter_id: hironytic
    - time: "22:45"
      name: "休憩"
    - time: "22:50"
      title: "Swift Playgroundを作ろう"
      tweets_url: "https://twitter.com/k_katsumi/status/985166281153265664"
      tweeter_id: k_katsumi
      description: |
        SwiftでJSFiddleのような、オンラインでいろいろなコードを試せるPlaygroundを作りましょう。
        重たいXcodeを起動しなくてもブラウザでサッと書いてすぐにコードを実行して結果を確認できます。
        問題のあるコードを複数人で実行結果を確認しながら議論できます。

        他にも、自分の作ったフレームワーク（それがLinux環境でも動作するのなら）のデモンストレーションとしても最適です。

        実際に活用している例として、私が公開しているSwift Power AssertやSwiftfmtの動作をインストールしなくてもWebで簡単に試せるライブデモとして公開しています。

        [https://swift-power-assert.kishikawakatsumi.com/](https://swift-power-assert.kishikawakatsumi.com/)
        [https://swiftfmt.kishikawakatsumi.com/](https://swiftfmt.kishikawakatsumi.com/)

        実行結果を画面ではなくJSONで返すWeb APIにすれば、チャットに投稿したコードを実行して結果を返すBotを作ることもできます。オンラインで議論したりするときに非常に便利です。このBotはiOS開発者が集うDiscordサーバーで実際に運用されており、当初の思惑を大きく超えて活発な議論に大いに役立っています。

        repl.itやWandboxなど、Swiftをサポートする同様のサービスもありますが、Swiftは変化の早いプログラミング言語です。残念ながらサポートするバージョンが古かったり、うまく動かないことの方がまだ多いようです。
        しかし、自分でセットアップするぶんにはまだリリースされてない最新のスナップショットを使用することもできます！
    - time: "23:20"
      name: "クロージング"
- id: 2018-winter
  title: "Swift Tweets 2018 Winter"
  short_title: "2018 Winter"
  hashtag: "swtws"
  date: "2018-01-20"
  day_of_week: "SAT"
  time: "21:00"
  timezone: "JST"
  entry_link: "https://swift-tweets.connpass.com/event/70160/"
  contact:
    twitter_id: koher
    email: koher@koherent.org
  sponsors: []
  tweeter_ids:
    - ikesyo
    - koher
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "どうやってSwiftのOSSをメンテナンスしていくか"
      tweets_url: "https://twitter.com/ikesyo/status/954687472369201155"
      tweeter_id: ikesyo
      description: |
        OSSを公開すること自体は簡単ですが、それをきちんとメンテナンスしていくことは意外と大変です。ましてやSwiftのような若い言語では、毎年のバージョンアップにも追従していく必要があります。

        Swift製のOSSにたくさん首を突っ込んでいる立場から、どのようにプロジェクトに貢献していくのか、メンテナンスをしていくのか、ということについて実体験から得た知見を共有したいと思います。
    - time: "21:40"
      name: "休憩"
    - time: "21:45"
      title: "Swift Foundationにコントリビュートする"
      url: "https://qiita.com/takasek/items/01f7746bf444bd5c85c0"
      tweets_url: "https://twitter.com/takasek/status/954696314171740160"
      tweeter_id: takasek
    - time: "21:55"
      title: "iOSじゃないところでSwiftを使う"
      tweets_url: "https://twitter.com/hiragram/status/954699064855076864"
      tweeter_id: hiragram
    - time: "22:05"
      name: "休憩"
    - time: "22:10"
      title: "世界をプログラミングで満たしたい"
      tweets_url: "https://twitter.com/koher/status/954702886935527424"
      tweeter_id: koher
      description: |
        -
    - time: "22:50"
      name: "クロージング"
- id: 2017-fall
  title: "Swift Tweets 2017 Fall"
  short_title: "2017 Fall"
  hashtag: "swtws"
  date: "2017-10-21"
  day_of_week: "SAT"
  time: "21:00"
  timezone: "JST"
  entry_link: "https://swift-tweets.connpass.com/event/62883/"
  contact:
    twitter_id: koher
    email: koher@koherent.org
  sponsors: []
  tweeter_ids:
    - koher
    - omochimetaru
    - taketo1024
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "Ownershipの紹介"
      url: "https://qiita.com/omochimetaru/items/c5f0eabde516e4713367"
      tweeter_id: omochimetaru
      description: |
        Swift はネイティブコンパイルや値型など、高速な動作を意識して設計されています。しかし、 CPU の性能を活かしきるコードを書くには機能が足りていません。

        コアチームは、その不足している機能郡のうち、あるカテゴリに属するものをまとめて Ownership という名前をつけ、今後の対応方針を文書化しました。

        その文書は [Ownership Manifesto](https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md) といいます。これには今後の対応予定が示されていますが、すでに Swift に実装されている部分もあります。

        この発表では、この文書にもとづいて、Swiftの Ownership 機能を紹介します。
    - time: "22:40"
      title: "Swift で √2 を作ろう"
      url: "https://togetter.com/li/1163526"
      tweeter_id: taketo1024
      description: |
        数学における代数構造を `protocol` として、対応する集合を `struct` として実装することで、数学の理論に忠実なコードを Protocol Oriented に作ることができます。

        この発表では数学の専門知識を仮定せずに、群・環・体の定義から「代数拡大で√2を作る話」まで、コードを元に解説していきます。数学に自信ない方でも Swift で数学を作る楽しさを感じて頂けたら幸いです。

        ※ iOSDC で発表した[「Swift で数学のススメ」](https://www.slideshare.net/taketo1024/swift-79828803)のコードレベルの解説となります。
    - time: "22:10"
      name: "休憩"
    - time: "22:20"
      title: "Proposalには載っていないSwift 5のasync/awaitが素晴らしいと思う理論的背景"
      url: "https://qiita.com/koher/items/29357b5e00aec1962601"
      tweeter_id: koher
      description: |
        Swift プログラマは長年に渡り非同期処理の辛さを強いられてきました。しかし去る 8 月、ついに Chris Lattner から `async/await` が[提案されました](https://gist.github.com/lattner/429b9070918248274f25b714dcfc7619)。この `async/await` は C# や JavaScript のものをそのまま輸入したわけではなく、 Swift にフィットするように変更が加えられています。

        実は、僕は[ほぼ同じ内容の提案をしようと準備をしていました](https://gist.github.com/koher/3e04b4f1b8adbbf0379d38c0ad83a3ea)。しかし、内容はほぼ同じものの、 Chris Lattner の Proposal には僕がなぜこの形の `async/await` が Swift にフィットすると考えたのかと同じような説明は書かれていませんでした。本発表では、僕がこのような `async/await` が適していると考えた理論的背景を説明することで、提案された `async/await` の素晴らしさについて補足することを目指します。
    - time: "23:00"
      name: "クロージング"
- id: 2017-summer
  title: "Swift Tweets 2017 Summer"
  short_title: "2017 Summer"
  hashtag: "swtws"
  date: "2017-07-22"
  day_of_week: "SAT"
  time: "21:00"
  timezone: "JST"
  entry_link: "https://swift-tweets.connpass.com/event/55313/"
  contact:
    twitter_id: koher
    email: koher@koherent.org
  sponsors: []
  tweeter_ids:
    - 1024jp
    - koher
    - rintaro
    - takasek
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "CotEditor を Swift に移行する"
      url: "https://qiita.com/1024jp/items/ef79bfb6ba9823adddcc"
      tweeter_id: 1024jp
      description: |
        2004 年から脈々と受け継がれる総 Cocoa 製の macOS 用テキストエディタ [CotEditor](https://coteditor.com) は、昨年 2016 年に Objective-C から Swift に 100% 移行しました。

        Swift は魅力的な言語ですが、すでに Objective-C で 10 年超動いてるアプリケーションを誰に頼まれたわけでもないのにわざわざ Swift で書き直す意味は果たしてあるのでしょうか？

        そこそこの規模の GUI アプリケーションを OSS 活動として実際にひとりで Swift に書き換えること、またコードが Swift になったことによる開発上の変化についてを、CotEditor の現開発者としてお話しします。
    - time: "21:35"
      title: "実践Swiftコンパイラ"
      url: "https://qiita.com/rintaro/items/e762d2a52c26a0be9fdc"
      tweeter_id: rintaro
      description: |
        この発表では、実際に Swift コンパイラのバグを修正し、プルリクエストを投げるまでの手続きを実践してみます。

        Swift コンパイラがオープンソース化されて結構な時間が経ちますが、まだまだ実際にコントリビュートしている人は少ない様です。コンパイラは私たちがいつも使っている道具の核です。その道具をより良くしていく努力に理由など必要無いはず。

        コンパイラは C++ で実装されていますが、バグを修正する程度の変更に C++ の知識はほとんど必要ありません。この発表によって少しでも「案外簡単な」コンパイラへのコントリビュートに興味をもっていただければと思います。
    - time: "22:00"
      name: "休憩"
    - time: "22:10"
      title: "Swiftに息づくstructural types"
      url: "https://qiita.com/takasek/items/c15ef7ce5a00e65a4ad2"
      tweeter_id: takasek
      description: |
        プログラミング言語の型システムは、その型の同定やサブタイピングの方法に注目したとき、 nominal type system / structural type system の二種類に区分することができます。 nominal type system においては型名の宣言が明示的に行われた場合にのみ同じ型あるいはサブタイプと見做されますが、 structural type system では型名はただのエイリアスです。

        Swift は多くの型を nominal type として扱っています。以前発表した ["What is a nominal type?"](https://speakerdeck.com/takasek/what-is-a-nominal-type) というスライドでは、 nominal type が意図しない型の同一視を防ぐために有用であることを示しました。

        では反対に、 structural type として扱われている関数型やタプル型は、なぜ nominal ではないのでしょうか。それらの型の活用例や、そこから見えてくる nominal type system の弱点や限界について、 ["型システム入門 −プログラミング言語と型の理論−"](https://www.amazon.co.jp/dp/4274069117) を参照しながら探ります。
    - time: "22:35"
      title: "純粋値型Swift"
      url: "https://qiita.com/koher/items/0745415a8b9842563ea7"
      tweeter_id: koher
      description: |
        Swift は値型を中心とした言語です。この発表では、仮に参照型を使わずに値型だけを使った場合、 Swift でどれだけのことができるかを探ります。

        Swift が登場した当初、僕は Swift が値型を中心としていることに戸惑いました。参照型でないとできないことは色々あるし、世の中は値型でも参照型に見せかける方向に動いていると思っていたからです。しかし、 Swift を使うにつれて、値型だけでできることは当初考えていたよりもずっと幅広いことがわかってきました。また、値型の特性を活かすことで、参照型では面倒なケースでコードを簡潔に保てることもわかってきました。

        Swift が最も利用されている iOS アプリ開発では、 UIKit 等の Objective-C 由来の Framework に引っ張られて参照型中心のプログラミングになってしまうことが多いと思います。そのため、せっかく値型中心の言語なのに Swift で値型中心のプログラミングをするための知見は十分に広まっていないように思います。この発表を通して、多くの人に値型中心でプログラミングをすることに対して興味を持っていただければと思います。
    - time: "23:00"
      name: "クロージング"
- id: 2017-spring
  title: "Swift Tweets 2017 Spring"
  short_title: "2017 Spring"
  hashtag: "swtws"
  date: "2017-04-15"
  day_of_week: "SAT"
  time: "21:00"
  timezone: "JST"
  entry_link: "https://swift-tweets.connpass.com/event/48887/"
  contact:
    twitter_id: koher
    email: koher@koherent.org
  sponsors: []
  tweeter_ids:
    - d_date
    - koher
  schedule:
    - time: "21:00"
      name: "オープニング"
    - time: "21:10"
      title: "Vapor as a web framework"
      tweeter_id: rb_de0
    - time: "21:15"
      title: "Swift 4では何が変わりそうなのか"
      url: "https://qiita.com/d_date/items/b3562f542afc306791ce"
      tweeter_id: d_date
      description: |
        Swift のバージョンアップは既存の API を使いやすく、美しくしてくれますが、痛みを伴うことが多いものとなっています。特に 2016 年は Swift 2.2 から 3.0 へのバージョンアップにより、その痛みを身を持って体験されたかと思います。また、 Xcode 8.3 から Swift 2.3 のサポートも終了し、 Swift 3 への移行を強いられることとなりました。

        Swift 3 への移行も一段落したところですが、今年は Swift 4 へのバージョンアップが予定されています。 Swift Evolution を始め、どのような機能が含まれるのか、日々議論がなされていますが、具体的にどのような変更が入るのか、ここで一度みなさんで見てみましょう。日頃メーリスを読んで、バッチリな方も、 Swift 4 のことはまだ全然キャッチアップできていない方も、一緒に Swift のこれからの話をしましょう。
    - time: "21:45"
      name: ディスカッション
    - time: "22:00"
      name: 休憩
    - time: "22:05"
      title: "Swift Standard Library相関図"
      tweeter_id: S_Shimotori_pub
    - time: "22:10"
      title: SwiftのOptionalのベストプラクティス
      url: "https://qiita.com/koher/items/8b6156c8263b9b23c43c"
      tweeter_id: koher
      description: |
        2年程前、 Qiita に[『SwiftのOptional型を極める』](http://qiita.com/koher/items/c6f446bad54442a28bf4)という投稿をしました。内容は、 `Optional` とは何かという説明と、 `Optional` のベストプラクティスを合わせたようなものでした。

        しかし、 Swift 1 だった当時と比べると状況が大きく変わり、特にベストプラクティスの部分が適切ではなくなってきました。また、 Swift の経験値も蓄積され、新たな知見も多く得られました。

        そこで、 Swift 3.1 時点での `Optional` 周りを整理し、いつ・どのように `Optional` を使うべきか、 `Optional` に関するベストプラクティスを説明します。
    - time: "22:45"
      name: 休憩
    - time: "22:50"
      title: "モックを「差し込む方法」を考える"
      tweeter_id: hironytic
    - time: "22:55"
      title: "Swiftで、ビデオ通話実装してみた"
      tweeter_id: nanamoto7483
    - time: "23:00"
      name: "クロージング"
- id: 2017-winter
  title: "Swift Tweets 2017 Winter"
  short_title: "2017 Winter"
  hashtag: "swtws"
  date: "2017-01-14"
  day_of_week: "SAT"
  time: "22:00"
  timezone: "JST"
  entry_link: "https://swift-tweets.connpass.com/event/45878/"
  contact:
    twitter_id: koher
    email: koher@koherent.org
  sponsors:
    - id: "qiita"
      name: "Qiita"
      link: "http://qiita.com/"
  tweeter_ids:
    - _mono
    - koher
    - susieyy
    - tarunon
  schedule:
    - time: "22:00"
      name: "オープニング"
    - time: "22:05"
      title: Swift時代に悩ましいUIViewControllerをどう扱うか
      url: "https://qiita.com/susieyy/items/bf39c5769d8d4a56bb9b"
      tweeter_id: susieyy
      description: |
        iOS アプリ開発において `UIViewController` は画面のライフルサイクルや遷移を担う中心的な存在ですが、悩ましい課題もいくつか孕んでいます。そんな `UIViewController` を Swift を活用して課題に立ち向かってみます。

        今回ご紹介する方法が一般的により優れているということではなくアプリの要件、開発規模、チームメンバー構成、設計方針により適応できるかどうかはケース・バイ・ケースになると思うので開発の選択肢の１つとして捉えていただけると幸いです。
    - time: "22:35"
      title: Swiftのエラー4分類が素晴らしすぎるのでみんなに知ってほしい
      url: "https://qiita.com/koher/items/a7a12e7e18d2bb7d8c77"
      tweeter_id: koher
      description: |
        Swift Core Team がエラー処理について言語設計時に考察した ["Error Handling Rationale and Proposal"](https://github.com/apple/swift/blob/master/docs/ErrorHandlingRationale.rst) というドキュメントがあります。その中で、プログラミングにおけるエラーが次の四つに分類されています。

        - Simple domain error
        - Recoverable error
        - Universal error
        - Logic failure

        考えれば考えるほど、この分類が本質的で素晴らしい、 Swift に限らないものだとわかってきました。 Swift を書く上でエラーをどう設計すれば良いのか、 Java の検査例外はなぜ失敗したのか、多くの言語のエラー処理機構には何が足りないのか、この分類を通して考えたことを紹介します。
    - time: "23:05"
      title: Swiftの型の限界を超える
      url: "https://qiita.com/tarunon/items/e3fd01b02a199747eb5e"
      tweeter_id: tarunon
      description: Swift で `associatedtype` や Generics を駆使してプログラムを書いているとしばしば壁に打ち当たることがあると思います。気持ちよくコードを書いていたが、コンパイルが通らなくなってしまう。思い描いていた美しい世界が実現できずに悔しい思いをしたことはないでしょうか。このセッションでは、僕が Swift 3.0 以降で見つけた幾つかの「壁」と、それを超えるための Workaround を、コンパイルが通らなくなる原因とともに解説していきたいと思います。
    - time: "23:35"
      title: "SwiftのString(文字列) APIとの付き合い方"
      url: "https://qiita.com/mono0926/items/139014be6c15e32b9696"
      tweeter_id: _mono
      description: |
        Swift の String (文字列) API は、文字列の概念を厳密に扱うようになっており良くできています。その反面、難しい・取っつきにくい・普段取り扱う際に不便、など気になる点もあります。そんな Swift の String API とどのように付き合っていけば良いだろうか、という考察をしていきます。

        前提として以下の記事に記載されている内容を理解済みとして、 Unicode・Swift の String API の仕様自体の説明は発表では最小限とする予定です。

        - [Unicodeとは？ その歴史と進化、開発者向け基礎知識 - Build Insider](http://www.buildinsider.net/language/csharpunicode/01)
        - [なぜSwiftの文字列APIは難しいのか \| プログラミング \| POSTD](http://postd.cc/why-is-swifts-string-api-so-hard/)
        - [「文字数」ってなぁに？〜String, NSString, Unicodeの基本〜 - Qiita](http://qiita.com/takasek/items/19438ecf7e60c8d53bbc)
    - time: "24:05"
      title: 型推論のビルドが遅いらしいから調べてみる
      tweeter_id: jpmartha_jp
    - time: "24:10"
      title: 恐怖！忍び寄るライブラリへのロックイン
      tweeter_id: takasek
    - time: "24:15"
      title: 関数型プログラミングの実際のところ
      tweeter_id: S_Shimotori_pub
    - time: "24:20"
      title: "Never GiveUp"
      tweeter_id: es_kumagai
    - time: "24:25"
      title: iOSにおけるクリーンアーキテクチャよもやま話
      tweeter_id: ktanaka117
    - time: "24:30"
      title: "Clean Architecture 開発ツールの話"
      tweeter_id: yhirose741
    - time: "24:35"
      name: "フリートーク"
      description: |
        発表内容やその他 Swift について、自由にツイートする時間です。普段は、いきなりメンションツイートで何かを質問したり意見を聞いたりすることは難しいと思いますが、この時間はオフラインの懇親会のように自由に交流して下さい。

        Swift Tweets の参加者一覧は[こちら](https://swift-tweets.connpass.com/event/45878/)です。
    - time: "24:55"
      name: "クロージング"
